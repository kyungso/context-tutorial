{"version":3,"sources":["contexts/color.js","components/SelectColors.js","components/ColorBox.js","App.js","serviceWorker.js","index.js"],"names":["ColorContext","createContext","state","color","subcolor","actions","setColor","setSubcolor","ColorProvider","children","useState","value","Provider","ColorConsumer","Consumer","colors","SelectColors","style","display","map","key","background","width","height","cursor","onClick","onContextMenu","e","preventDefault","ColorBox","backgroundColor","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oLAEMA,EAAeC,wBAAc,CAC/BC,MAAO,CACHC,MAAO,QACPC,SAAU,OAEdC,QAAS,CACLC,SAAU,aACVC,YAAa,gBAIfC,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACVC,mBAAS,SADC,mBAC7BP,EAD6B,KACtBG,EADsB,OAEJI,mBAAS,OAFL,mBAI9BC,EAAQ,CACVT,MAAO,CAAEC,QAAOC,SALgB,MAMhCC,QAAS,CAAEC,WAAUC,YANW,OASpC,OACI,kBAACP,EAAaY,SAAd,CAAuBD,MAAOA,GAAQF,IAI5BI,EAAkBb,EAA5Bc,SCxBFC,EAAS,CAAC,MAAO,SAAU,SAAU,QAAS,OAAQ,SAAU,UAiCvDC,EA/BM,WACjB,OACE,6BACE,kFACA,kBAACH,EAAD,MACC,gBAAGR,EAAH,EAAGA,QAAH,OACG,yBAAKY,MAAO,CAAEC,QAAS,SACpBH,EAAOI,KAAI,SAAAhB,GAAK,OACf,yBACEiB,IAAKjB,EACLc,MAAO,CACHI,WAAYlB,EACZmB,MAAO,OACPC,OAAO,OACPC,OAAQ,WAEZC,QAAS,kBAAMpB,EAAQC,SAASH,IAChCuB,cAAe,SAAAC,GACXA,EAAEC,iBACFvB,EAAQE,YAAYJ,aAOlC,+BCHO0B,EAzBE,WACb,OACI,kBAAChB,EAAD,MACK,gBAAGX,EAAH,EAAGA,MAAH,OACC,oCACE,yBACEe,MAAO,CACHK,MAAO,OACPC,OAAQ,OACRO,gBAAiB5B,EAAMC,SAG7B,yBACAc,MAAO,CACHK,MAAO,OACPC,OAAQ,OACRO,gBAAiB5B,EAAME,iBCH5B2B,EAXH,WACV,OACE,kBAAC,EAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.90a03ae0.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nconst ColorContext = createContext({ \n    state: {\n        color: 'black',\n        subcolor: 'red'\n    },\n    actions: {\n        setColor: () => {},\n        setSubcolor: () => {}\n    }\n});\n\nconst ColorProvider = ({ children }) => {\n    const [color, setColor] = useState('black');\n    const [subcolor, setSubcolor] = useState('red');\n\n    const value = {\n        state: { color, subcolor },\n        actions: { setColor, setSubcolor }\n    };\n\n    return (\n        <ColorContext.Provider value={value}>{children}</ColorContext.Provider>\n    );\n};\n\nconst { Consumer: ColorConsumer } = ColorContext;\n\nexport { ColorProvider, ColorConsumer };\n\nexport default ColorContext;","import React from 'react';\nimport { ColorConsumer } from '../contexts/color';\n\nconst colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n\nconst SelectColors = () => {\n    return (\n      <div>\n        <h2>색상을 선택하세요.</h2>\n        <ColorConsumer>\n        {({ actions }) => (\n            <div style={{ display: 'flex' }}>\n              {colors.map(color => (\n                <div\n                  key={color}\n                  style={{\n                      background: color,\n                      width: '24px',\n                      height:'24px',\n                      cursor: 'pointer'\n                  }}\n                  onClick={() => actions.setColor(color)}\n                  onContextMenu={e => {\n                      e.preventDefault();\n                      actions.setSubcolor(color);\n                  }}\n                />\n            ))}\n          </div>\n        )}\n        </ColorConsumer>\n        <hr />\n    </div>\n    );\n}\n\nexport default SelectColors;","import React from 'react';\nimport { ColorConsumer } from '../contexts/color';\n\nconst ColorBox = () => {\n    return (\n        <ColorConsumer>\n            {({ state }) => (\n              <>\n                <div\n                  style={{\n                      width: '64px',\n                      height: '64px',\n                      backgroundColor: state.color\n                  }}\n                />\n                <div\n                style={{\n                    width: '32px',\n                    height: '32px',\n                    backgroundColor: state.subcolor\n                }}\n                />\n              </>\n            )}\n        </ColorConsumer>\n    );\n};\n\nexport default ColorBox;","import React from 'react';\nimport { ColorProvider } from './contexts/color';\nimport SelectColors from './components/SelectColors';\nimport ColorBox from './components/ColorBox';\n\nconst App = () => {\n  return (\n    <ColorProvider>\n      <div>\n        <SelectColors />\n        <ColorBox />\n      </div>\n    </ColorProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}